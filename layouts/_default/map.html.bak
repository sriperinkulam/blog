{{ define "main" }}
<div class="container">
    <form id="contactForm" class="form">
        <input type="text" id="hiddenField" name="hiddenField" style="display: none;"> <!-- Hidden field for spam detection -->
        
        <div class="form-group">
            <label for="message">Comment</label>
            <textarea id="message" name="message" class="form-control" placeholder="Type in your comment" rows="5" required style="background-color: #f0f8ff; border: 1px solid #007bff;"></textarea>
        </div>
        <div class="form-group" style="display: flex; justify-content: space-between;">
            <div style="flex: 1; margin-right: 10px;">
                <label for="name">Name</label>
                <input type="text" id="name" name="name" class="form-control" placeholder="Mountain Goat" required style="background-color: #f0f8ff; border: 1px solid #007bff;">
            </div>
            <div style="flex: 1;">
                <label for="email">E-mail (will not be published)</label>
                <input type="email" id="email" name="email" class="form-control" placeholder="mountain@goat.com" required style="background-color: #f0f8ff; border: 1px solid #007bff;">
            </div>
        </div>
        <div class="form-group">
            <label for="website">Website (optional)</label>
            <input type="url" id="website" name="website" class="form-control" placeholder="Your Website" style="background-color: #f0f8ff; border: 1px solid #007bff;">
        </div>
        <div class="form-group" style="text-align: right;">
            <button type="submit" class="btn btn-primary" style="background-color: #007bff; color: white;">Submit</button>
        </div>
    </form>

    <div class="message" id="responseMessage"></div>
</div>

<script>
    // Function to sanitize input
    function sanitizeInput(input) {
        const element = document.createElement('div');
        element.innerText = input; // Use innerText to escape HTML
        return element.innerHTML; // Return the escaped HTML
    }

    document.getElementById('contactForm').addEventListener('submit', function(event) {
        event.preventDefault(); // Prevent the default form submission

        // Check if the hidden field is filled (spam bot check)
        const hiddenField = document.getElementById('hiddenField').value;
        if (hiddenField) {
            document.getElementById('responseMessage').innerText = 'Submission rejected due to spam detection.';
            return; // Stop the submission
        }

        // Gather and sanitize form data
        const message = sanitizeInput(document.getElementById('message').value);
        const name = sanitizeInput(document.getElementById('name').value);
        const email = sanitizeInput(document.getElementById('email').value);
        const website = sanitizeInput(document.getElementById('website').value);

        // Get the title of the current post (assuming it's available in a variable)
        const postTitle = document.title; // Use the document title as the post title
  
        // Construct the message body in paragraph format
        const body = `Post Title: ${postTitle} Comment: ${message} Name: ${name} Email: ${email} Website: ${website}`;

        // Send the data to Gotify using curl-like format
        const gotifyUrl = 'https://gtfy.srkn.org/message'; // Replace with your Gotify instance URL
        const applicationToken = 'AI3c7R8m5FvleiJ'; // Replace with your Gotify application token

        // Construct the curl command as a string (for demonstration purposes)
        const curlCommand = `curl "${gotifyUrl}?token=${applicationToken}" -F "title=${postTitle}" -F "message=${body}" -F "priority=5"`;

        // Log the curl command to the console (for debugging)
        console.log(curlCommand);

        // Send the data to Gotify
        fetch(`${gotifyUrl}?token=${applicationToken}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded'
            },
            body: new URLSearchParams({
                title: postTitle,
                message: body,
                priority: 5
            })
        })
        .then(response => {
            if (response.ok) {
                document.getElementById('responseMessage').innerText = 'Thank you. Your comment has been received and will be published once moderated.';
                document.getElementById('contactForm').reset(); // Reset the form
            } else {
                throw new Error('Network response was not ok.');
            }
        })
        .catch(error => {
            document.getElementById('responseMessage').innerText = 'There was a problem sending your message.';
            console.error('There was a problem with the fetch operation:', error);
        });
    });
</script>

<style>
    .container {
        max-width: 600px;
        margin: auto;
        padding: 20px;
        background-color: var(--bg-container);
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    }
    .form-group {
        margin-bottom: 15px;
    }
    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid var(--border-color);
        border-radius: 4px;
        background: var(--input-bg);
#        color: var(--input-text-color);
        color: black;
    }
    .form-control:focus {
        outline: none;
        border-color: #007bff; /* Highlight border on focus */
        box-shadow: 0 0 5px rgba(0, 123, 255, 0.5); /* Highlight effect */
    }
    .btn {
        padding: 10px 15px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }
    .btn-primary {
        background-color: #007bff; /* Blue color */
        color: white;
    }
    .btn-primary:hover {
        background-color: #0056b3; /* Darker blue on hover */
    }
    .message {
        margin-top: 20px;
        text-align: center;
    }
</style>
{{ end }}
